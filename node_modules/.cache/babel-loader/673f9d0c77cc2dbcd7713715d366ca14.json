{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Downloads/Movie-main 2/src/components/movie-list/MovieList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./movie-list.scss\";\nimport { SwiperSlide, Swiper } from \"swiper/react\";\nimport tmdbApi, { category } from \"../../api/tmdbApi\";\nimport MovieCard from \"../movie-card/MovieCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieList = props => {\n  _s();\n\n  const [items, setItems] = useState([]);\n  useEffect(() => {\n    const getList = async () => {\n      let response = null;\n      const params = {};\n\n      if (props.type !== \"similar\") {\n        switch (props.category) {\n          case category.movie:\n            response = await tmdbApi.getMoviesList(props.type, {\n              params\n            });\n            break;\n\n          default:\n            response = await tmdbApi.getTvList(props.type, {\n              params\n            });\n        }\n      } else {\n        response = await tmdbApi.similar(props.category, props.id);\n      }\n\n      setItems(response.data.results);\n    };\n\n    getList();\n  }, [props.category, props.id, props.type]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-list\",\n    children: /*#__PURE__*/_jsxDEV(Swiper, {\n      grabCursor: true,\n      spaceBetween: 10,\n      slidesPerView: \"auto\",\n      children: items.map((item, i) => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n        children: /*#__PURE__*/_jsxDEV(MovieCard, {\n          item: item,\n          category: props.category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MovieList, \"E85yb7BhBnl3/OpymRdjFiQJ97s=\");\n\n_c = MovieList;\nMovieList.propTypes = {\n  category: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired\n};\nexport default MovieList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"sources":["/Users/macbook/Downloads/Movie-main 2/src/components/movie-list/MovieList.jsx"],"names":["React","useState","useEffect","PropTypes","SwiperSlide","Swiper","tmdbApi","category","MovieCard","MovieList","props","items","setItems","getList","response","params","type","movie","getMoviesList","getTvList","similar","id","data","results","map","item","i","propTypes","string","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,mBAAP;AACA,SAASC,WAAT,EAAsBC,MAAtB,QAAoC,cAApC;AACA,OAAOC,OAAP,IAAkBC,QAAlB,QAAkC,mBAAlC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,OAAO,GAAG,YAAY;AAC1B,UAAIC,QAAQ,GAAG,IAAf;AACA,YAAMC,MAAM,GAAG,EAAf;;AAEA,UAAIL,KAAK,CAACM,IAAN,KAAe,SAAnB,EAA8B;AAC5B,gBAAQN,KAAK,CAACH,QAAd;AACE,eAAKA,QAAQ,CAACU,KAAd;AACEH,YAAAA,QAAQ,GAAG,MAAMR,OAAO,CAACY,aAAR,CAAsBR,KAAK,CAACM,IAA5B,EAAkC;AAAED,cAAAA;AAAF,aAAlC,CAAjB;AACA;;AACF;AACED,YAAAA,QAAQ,GAAG,MAAMR,OAAO,CAACa,SAAR,CAAkBT,KAAK,CAACM,IAAxB,EAA8B;AAAED,cAAAA;AAAF,aAA9B,CAAjB;AALJ;AAOD,OARD,MAQO;AACLD,QAAAA,QAAQ,GAAG,MAAMR,OAAO,CAACc,OAAR,CAAgBV,KAAK,CAACH,QAAtB,EAAgCG,KAAK,CAACW,EAAtC,CAAjB;AACD;;AACDT,MAAAA,QAAQ,CAACE,QAAQ,CAACQ,IAAT,CAAcC,OAAf,CAAR;AACD,KAhBD;;AAiBAV,IAAAA,OAAO;AACR,GAnBQ,EAmBN,CAACH,KAAK,CAACH,QAAP,EAAiBG,KAAK,CAACW,EAAvB,EAA2BX,KAAK,CAACM,IAAjC,CAnBM,CAAT;AAqBA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACE,QAAC,MAAD;AAAQ,MAAA,UAAU,EAAE,IAApB;AAA0B,MAAA,YAAY,EAAE,EAAxC;AAA4C,MAAA,aAAa,EAAE,MAA3D;AAAA,gBACGL,KAAK,CAACa,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,kBACT,QAAC,WAAD;AAAA,+BACE,QAAC,SAAD;AAAW,UAAA,IAAI,EAAED,IAAjB;AAAuB,UAAA,QAAQ,EAAEf,KAAK,CAACH;AAAvC;AAAA;AAAA;AAAA;AAAA;AADF,SAAkBmB,CAAlB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAnCD;;GAAMjB,S;;KAAAA,S;AAqCNA,SAAS,CAACkB,SAAV,GAAsB;AACpBpB,EAAAA,QAAQ,EAAEJ,SAAS,CAACyB,MAAV,CAAiBC,UADP;AAEpBb,EAAAA,IAAI,EAAEb,SAAS,CAACyB,MAAV,CAAiBC;AAFH,CAAtB;AAKA,eAAepB,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./movie-list.scss\";\nimport { SwiperSlide, Swiper } from \"swiper/react\";\nimport tmdbApi, { category } from \"../../api/tmdbApi\";\nimport MovieCard from \"../movie-card/MovieCard\";\n\nconst MovieList = (props) => {\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    const getList = async () => {\n      let response = null;\n      const params = {};\n\n      if (props.type !== \"similar\") {\n        switch (props.category) {\n          case category.movie:\n            response = await tmdbApi.getMoviesList(props.type, { params });\n            break;\n          default:\n            response = await tmdbApi.getTvList(props.type, { params });\n        }\n      } else {\n        response = await tmdbApi.similar(props.category, props.id);\n      }\n      setItems(response.data.results);\n    };\n    getList();\n  }, [props.category, props.id, props.type]);\n\n  return (\n    <div className=\"movie-list\">\n      <Swiper grabCursor={true} spaceBetween={10} slidesPerView={\"auto\"}>\n        {items.map((item, i) => (\n          <SwiperSlide key={i}>\n            <MovieCard item={item} category={props.category} />\n          </SwiperSlide>\n        ))}\n      </Swiper>\n    </div>\n  );\n};\n\nMovieList.propTypes = {\n  category: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n};\n\nexport default MovieList;\n"]},"metadata":{},"sourceType":"module"}